Thread Class:: Encapsulates all thread related functionality.

Two ways top run code on a new thread.
a.Implement Runnable interface and pass to new Thread object.
b.Extend Thread class and create new object of that.

Thread Termination-- Why and When?
-->Thread consumes resources.
-Memory and Kernel resources.
-Cpu cycles and cache memory

--If a thread finished its work and application is still running, we want to clean up the thread's resources.
--If a thread is misbehaving, we want to stop it.
--By default,the application will not stop as long as at least one thread is still running.

Every thread has interrupt method, which it can send as signal to other thread to stop.

When can we interrupt a thread?
1.If the thread is executing a method, that throws an interrupted exception.
2.If the thread's code is handling the interrupt signal explicitly.

Demon Thread::
Background thread that do not prevent the application from exiting if the main thread terminates.

Daemon Threads- Scenario 1
Background task that should not block our application from terminating. eg:: File saving thread in a text editor.

Scenario-2
Code in worker thread is not under our control, and we do not want it to block our application from terminating.
eg:: Worker thread that uses an external library.

Thread Coordination:: Different threads run independently.
Order of execution is out of our control.

What happens in case one thread depends on another thread.

public final void join()
public final void join(int millisec)

When the join method is invoked, the current thread  goes into the wait state.The thread on which wait has been invoked will execute till it finishes.























